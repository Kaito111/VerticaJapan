select /*+label(isLoadBalanced)*/ right(node_name,3)::int as node_num, count( case when request_type ='LOAD' then 1 else null end ) as loads_initiated, count( case when request_type ='QUERY' then 1 else null end ) as selects_initiated from dc_requests_issued a join vs_nodes b on a.node_name = b.name and nodetype = 0 group by 1 order by node_num;


==Tables with Unused Projections==
select /*+label(LargeUnusedNonSuperProjections)*/ v2.schemaname schema_name, v2.anchortablename table_name,v2.issuperprojection,v2.isaggregateprojection,v2.projection_row_count row_count ,v1.proj_count projection_count , days_of_history,listagg(v2.basename||' ' USING PARAMETERS max_length=2048,on_overflow='TRUNCATE') projection_basename, case when days_of_history > 7 then 'V_ACTION: Projections were not used by queries in last 7 days. Consider dropping these projection(s) to conserve system resources.' end action from ( select datediff('day',min(time),max(time)) as days_of_history from dc_projections_used group by node_name having datediff('day',min(time),max(time)) > 7 order by 1 limit 1) foo ,( (select anchortable ,count(distinct basename) proj_count from vs_projections group by 1 having count(*) >= 4) v1 join (select schemaname, anchortablename,anchortable, basename,issuperprojection ,isaggregateprojection,sum(total_row_count-deleted_row_count) as projection_row_count from vs_projections v4 join storage_containers on oid = projection_id where (schemaname||name) not in (select table_schema||projection_name from dc_projections_used where io_type = 'input' ) and ((not(issuperprojection) and seginfo <> 0) or anchortable in (select anchortable from vs_projections v3 where seginfo <> 0 and issuperprojection group by 1 having count(*) >= 4)) group by schemaname, anchortablename,anchortable, basename, issuperprojection,isaggregateprojection having sum(total_row_count-deleted_row_count) > 100000000 and count(distinct name) > 1 ) v2 on v1.anchortable = v2.anchortable ) bar group by 1,2,3,4,5,6,7 order by v1.proj_count desc limit 50;

==Projections with Data Skew==
select /*+label(ProjsWithMT10PercentSkewedData)*/ schema_name as schema_name , projection_name as projection_name, min(cnt) as min_count , avg(cnt)::int as avg_count, max(cnt) as max_count , ((max(cnt)*100/min(cnt))-100)::int as skew_percent, case when (((max(cnt)*100/min(cnt))-100)::int > 50 and min(cnt) > 100000000) then 'V_ACTION: Detected projection with more than 50% data skew, create projection with new segmentation clause to fix data skew, refresh and drop old projection' end action from (select node_name,schema_name,projection_name,sum(total_row_count - deleted_row_count) as cnt from storage_containers group by 1,2,3 having sum(total_row_count- deleted_row_count) > 100000000 ) foo group by 1,2 having ((max(cnt)*100/min(cnt))-100)::int > 15 order by 6 desc limit 50;